plugins {
    id "application"
    id "com.exactpro.th2.gradle.component" version "0.1.6"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.kapt" version "$kotlin_version"
    id "me.champeau.jmh" version "0.7.2"
}

ext {
    sailfishVersion = '3.4.260'
    commonVersion = '5.15.0-windows-compatible-11379366273-569bd5b-SNAPSHOT'
    jmhVersion = '1.37'
}

group = 'com.exactpro.th2'
version = release_version

ext.excludeSailfish = { rcd ->
    rcd.excludeModule("com.exactpro.sf", "sailfish-core")
    rcd.excludeModule("com.exactpro.sf", "sailfish-common")
    rcd.excludeModule("com.exactpro.sf", "sailfish-rest-api-client")
    rcd.excludeModule("com.exactpro.sf", "service-http")
}

repositories {
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        content {
            excludeSailfish(it)
        }
    }

    // ignoreGradleMetadataRedirection is used for sonatype because
    // Sailfish dependencies have constrains that interfere with our BOM
    // so we exclude Gradle metadata for this repositories.
    // We've checked these versions - they are compatible and safe to use
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        content {
            excludeSailfish(it)
        }
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }

    mavenCentral()
    mavenLocal()

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

dependencies {
    implementation "com.exactpro.th2:common:$commonVersion"
    implementation "com.exactpro.th2:codec:5.5.0-dev"

    implementation ("com.exactpro.sf:sailfish-common:$sailfishVersion") {
        exclude group: "commons-configuration", module: "commons-configuration" // because of the vulnerability
        exclude group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-yaml" // because of the vulnerability
        exclude group: "com.exactpro.mina", module: "apache-mina-core" // because of the vulnerability
        exclude group: "javax.activation", module: "javax.activation-api" // because of the license
    }

    implementation "io.netty:netty-buffer"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "io.github.oshai:kotlin-logging:5.1.4"

    compileOnly "com.google.auto.service:auto-service:1.1.1"
    annotationProcessor "com.google.auto.service:auto-service:1.1.1"
    kapt "com.google.auto.service:auto-service:1.1.1"

    jmh "org.openjdk.jmh:jmh-core:$jmhVersion"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
    jmh "org.openjdk.jmh:jmh-generator-bytecode:$jmhVersion"

    testImplementation "org.junit.jupiter:junit-jupiter:5.11.3"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
    testImplementation "org.assertj:assertj-core:3.26.3"
}

test.useJUnitPlatform()
application.mainClass = "com.exactpro.th2.codec.MainKt"
dependencyCheck.suppressionFile = "suppressions.xml"